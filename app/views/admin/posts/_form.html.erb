
<div class="main-panel">
  <div class="content-wrapper">
    <div class="row">
      <div class="col-12 grid-margin stretch-card">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title">Bài viết</h4>
            <%= form_with(model: [:admin, @post], local: true, class: "form-group" ) do |form| %>
              <%= form.label :title, "Tiêu đề" %>
              <%= form.text_field :title, class: "form-control", id: "title-input" %>

              <%= form.label :slug, "Liên kết" %>
              <%= form.text_field :slug, class: "form-control", id: "slug-input" %>

              <%= form.label :intro, "Đoạn giới thiệu" %>
              <%= form.text_area :intro, class: "form-control" %>
              <%= form.label :image_intro, "Ảnh giới thiệu" %>
              <br>
              <%= form.file_field :image_intro, id: :post_image %>
              <br>
              <br>
              <% if @post&.image_intro&.url %>
                 <%= image_tag(@post.image_intro.url, id: "preview", style: "height: 200px; with: 200px") %>
              <% else %>
                <%= image_tag("", id: "preview", style: "display: none; height: 200px; with: 200px") %>
              <% end %>
              <br>
              <br>
              <%= form.label :content, "Nội dung" %>
              <%= form.text_area :content, class: "form-control tinymce" %>
              <br>
              <%= form.label :category, "Thể loại bài viết" %>
              <br>
              <%= form.select :category_id, Category.all.map{|r| [r.name, r.id] },  {}, { class: "form-control w-50" }%>
              <%= form.submit form.object.new_record? ? "Thêm" : "Chỉnh sửa", class: "btn btn-action-form" %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  document.addEventListener('turbolinks:load', function() {
    tinymce.remove(); // Rem  ove any existing instances of TinyMCE
    tinymce.init({
    selector: '.tinymce',
    height: 700,
    plugins: [
      'image', "lists", "table"
    ],
    toolbar: 'undo redo | formatselect | ' +
    ' bold italic | alignleft aligncenter ' +
    ' alignright alignjustify | bullist numlist outdent indent | ' +
    ' removeformat | help | forecolor backcolor image | ',
    table_sizing_mode: 'relative',
    table_column_resizing: 'resizetable',
    table_class_list: [
    {title: 'None', value: ''},
    {title: 'No Borders', value: 'table_no_borders'},
    {title: 'Red borders', value: 'table_red_borders'},
    {title: 'Blue borders', value: 'table_blue_borders'},
    {title: 'Green borders', value: 'table_green_borders'}
   ],
    image_title: true,
    automatic_uploads: true,
    images_upload_url: '/text_images',
    file_picker_types: 'image',

    document_base_url: '/',

    file_picker_callback: function(cb, value, meta) {
      var input = document.createElement('input');
      input.setAttribute('type', 'file');
      input.setAttribute('accept', 'image/*');

      input.onchange = function() {
        var file = this.files[0];

        var id = 'blobid' + (new Date()).getTime();
        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
        var blobInfo = blobCache.create(id, file);
        blobCache.add(blobInfo);

        cb(blobInfo.blobUri(), { title: file.name });
      };

      input.click();
    }
    });
  });

  const titleInput = document.getElementById('title-input');
  const slugInput = document.getElementById('slug-input');

  // Add an event listener to the title input for the "input" event
  titleInput.addEventListener('input', function() {
    const titleValue = titleInput.value;
    const valueChange = titleValue.normalize("NFD").replace(/[\u0300-\u036f]/g, "")
    const slugValue = slugify(valueChange);
    slugInput.value = slugValue;
  });

  function slugify(text) {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace("đ", "d")
  }

  const imageInput = document.getElementById("post_image");
  const previewImg = document.getElementById("preview");

  imageInput.addEventListener("change", function() {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(event) {
        previewImg.src = event.target.result;
      };
      reader.readAsDataURL(file);
      previewImg.style.display = "block";
    } else {
      previewImg.src = "#";
      previewImg.style.display = "none";
    }
  });

</script>

